<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Pedro AI</title>
<link>https://trackmania-ai.github.io/tmblog/blog/blog/index.html</link>
<atom:link href="https://trackmania-ai.github.io/tmblog/blog/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>Collection of blog article about trackmania-ai project</description>
<generator>quarto-1.3.340</generator>
<lastBuildDate>Wed, 26 Apr 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>How PedroAI works</title>
  <dc:creator>Pierre Porcher</dc:creator>
  <link>https://trackmania-ai.github.io/tmblog/blog/blog/posts/pedroai-rl/pedroai-rl.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<p>Here you will learn how the deep reinforcement learning project <a href="?var:stream">PedroAI</a> works. The project features an AI learning to play the popular racing game <a href="?var:trackmania">Trackmania</a>. The entire process is streamed on <a href="?var:stream">Twitch</a> allowing viewers to watch the AI improve over time.</p>
<p>This article is the second of a two-part series where we first learn about deep reinforcement learning basics before diving deeper into the specificities of the <a href="?var:stream">PedroAI</a> project.</p>
<ul>
<li><a href="../rl-introduction/rl-introduction.html">Introduction to Deep Reinforcement Learning (Trackmania AI POV)</a></li>
<li>How PedroAI works</li>
</ul>
<p>A third article about the technical details of <a href="?var:stream">PedroAI</a> is being written as you read this.</p>
<p>Here we will describe the project at a high level and not go into technical details about the implementation. Let’s start with an overview of the training.</p>
<section id="training-overview" class="level1">
<h1>Training overview</h1>
<p>PedroAI uses the Deep Q-Learning (DQN) algorithm with a few adaptations. It features 4 workers: 3 environments that collect experiences (the 3 games you see on <a href="?var:stream">stream</a>) and one learner that trains the AI neural network. They all share a common replay buffer. The 3 environments send their experiences to this buffer. The learner samples it and builds batches of experiences to learn from them.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/pedroai-rl/simple_training_loop.svg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">PedroAI training loop</figcaption>
</figure>
</div>
<section id="collector" class="level2">
<h2 class="anchored" data-anchor-id="collector">Collector</h2>
<p>The main role of the collector is to execute the reinforcement learning loop (RL loop) to collect experiences. An experience is composed of a state, an action, a reward, and the next state. The collector also loads Trackmania maps and cycle exploration strategies.</p>
<section id="rl-loop" class="level3">
<h3 class="anchored" data-anchor-id="rl-loop">RL loop</h3>
<p>After loading a map, the collector start to execute the RL loop. For the PedroAI project it looks like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/pedroai-rl/rl_loop_detailed.svg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">PedroAI collector</figcaption>
</figure>
</div>
<p>In practice, the collector peforms the following actions in sequence:</p>
<style>
ol.redcircle {
  counter-reset: item; /*Remove default style*/
  list-style-type: none;
  padding-left: 20px; /*space between the block and the number*/
}

li.redcircle {
  display: block;
}

li.redcircle:before {
  background-color: red;
  border-radius: 50%;
  color: white;
  font-weight: bold;
  margin-right: 4px;
  padding-left: 4px;
  content: counter(item) "  ";
  counter-increment: item
}
</style>
<ol class="redcircle">
<li class="redcircle">
Read current state (or use next state from step 6):
<ul>
<li>
Screenshot the game window for visual data
</li>
<li>
Read telemetry data (speed, rpm, wheel angle … and many more)
</li>
<li>
Compute reference trajectory data in the frame of reference of the car
</li>
</ul>
</li>
<li class="redcircle">
Score each possible action with the neural network
</li>
<li class="redcircle">
Pick an action
</li>
<li class="redcircle">
Apply the action in game
</li>
<li class="redcircle">
Wait 100ms, this is the default timestep
</li>
<li class="redcircle">
Read the next state
</li>
<li class="redcircle">
Compute the reward
</li>
<li class="redcircle">
Send the sequence (state, action, reward, next state) to the replay buffer
</li>
</ol>
</section>
<section id="loading-maps" class="level3">
<h3 class="anchored" data-anchor-id="loading-maps">Loading maps</h3>
<p>A collector loads a new map every session, i.e., every 10 rounds. The goal is to frequently show different environments to the AI. This helps generalization and makes the AI better when confronted to unseen maps.</p>
</section>
<section id="exploration-strategy" class="level3">
<h3 class="anchored" data-anchor-id="exploration-strategy">Exploration strategy</h3>
<p>The exploration strategy changes every round across a session. These strategies have an impact on step “3) Pick an action” of the RL loop. The agent doesn’t always take the optimal action acording to its neural network. Sometimes it takes action at random. The goal is to prevent the agent from always driving the same way and let it discover new trajectories.</p>
<p>PedroAI uses 3 differents strategies: Greedy, Epsilon-greedy and Rank Boltzmann exploration.</p>
<ul>
<li>Greedy: The agent always takes the optimal action according to its neural network.</li>
<li>Epsilon-greedy: The agent does random exploration occasionally with probability ε and takes the optimal action most of the time with probability 1 - ε.</li>
<li>Rank Boltzmann exploration: The agent draws actions from a Boltzmann distribution (softmax) over the rank of each action, regulated by a temperature parameter τ. In other words, the neural network scores each possible actions, then they are ranked starting with the lowest value. Finally, we apply a softmax on these rank and draw from the resulting probability distribution.</li>
</ul>
</section>
</section>
<section id="replay-buffer" class="level2">
<h2 class="anchored" data-anchor-id="replay-buffer">Replay buffer</h2>
<p>The replay buffer is the memory of the AI. Experiences (state, action, reward, next state) collected by the collectors are stored in this buffer. It enables “experience replay”. The learner sample the buffer randomly to build batches of experiences and “replays” them to train the neural network.</p>
<p>PedroAI employ a Prioritized Experience Replay, meaning that each experience is associated with a priority. The priority value corresponds to the error the AI makes when it tries to score this experience. The more the AI is wrong about an experience, the more it is likely to sample this experience again, learn from it, and correct its estimation.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/pedroai-rl/replay_buffer_with_priorities.svg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Replay buffer with priorities</figcaption>
</figure>
</div>
</section>
<section id="learner" class="level2">
<h2 class="anchored" data-anchor-id="learner">Learner</h2>
<p>In the PedroAI project, the learner is independent of the collectors, this is a separate worker. Its loop looks like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/pedroai-rl/learner_loop.svg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">PedroAI learner</figcaption>
</figure>
</div>
<ol class="redcircle">
<li class="redcircle">
Sample the replay buffer to create a batch
</li>
<li class="redcircle">
Fit one batch to estimate the Q values
</li>
<li class="redcircle">
Compare the Q values estimation with the target Q values to compute an error for each experience in the batch
</li>
<li class="redcircle">
Update the neural network weights in order to produce smaller errors next time
</li>
<li class="redcircle">
Update the priorities of the replay buffer using the error values
</li>
</ol>
<p>As we have seen in the <a href="../rl-introduction/rl-introduction.html#the-deep-in-reinforcement-learning">previous article</a>, PedroAI uses Deep Q-Learning. Its neural network estimates the expected return of a state for each action it could take.</p>
<p>During step 3), the learner compares the neural network Q values estimates with target values. Target values are the true expected return values for each action (or rather an approximation of the true value, more on this later). Then, the learner adjusts the neural network weights to make the Q value estimation closer to the target values.</p>
<p>The difference between the estimation and target value, the error, is then used to update replay buffer priorities at step 5).</p>
<p>It is important to note that the neural network estimates the expected return directly and not only the reward between current and next state. It means that with one state, it estimates the expected discounted cumulative reward that takes into account all future rewards.</p>
<p>The neural network tries to estimates this value for each action possible:</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/pedroai-rl/action_value_function.svg" class="img-fluid"></p>
<p>But how can AI pull this trick and estimate the expected return directly with one state ? We will find out in the next chapter.</p>
<p>Before we move on, here is the complete diagram of PedroAI’s training loop:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/pedroai-rl/complete_loop.svg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Detailed PedroAI training loop</figcaption>
</figure>
</div>
</section>
</section>
<section id="target-convergence" class="level1">
<h1>Target convergence</h1>
<p>At the beginning of the training, the AI estimates the expected discounted cumulative rewards, or Q values, for each action randomly (depending of the random initialisation of the neural network weights).</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/pedroai-rl/initial_nn_estimation.svg" class="img-fluid"></p>
<p>Q value estimations are represented with orange bars, they are blured to show randomness.</p>
<p>When learning from an experience (state S<sub>t</sub>, action A<sub>t</sub>, reward R<sub>t</sub>, next_state S<sub>t+1</sub>) the AI compares its Q value estimation with the target Q value.</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/pedroai-rl/targetq_comparison.svg" class="img-fluid"></p>
<p>But how do we compute the target Q value that takes into account all future rewards only from reward R<sub>t</sub> and next_state S<sub>t+1</sub> ? Here we are looking for the true Q value, the value with which the neural network will compare its own estimation to learn. We can’t get this exact value directly from a reward and a next_state, right ?</p>
<p>Right! We don’t compute this exact value, but we compute an approximation of it using our own neural network again, this time on next_state S<sub>t+1</sub> and selecting the action with the highest Q value. Then we discount this value by ɣ and add the reward R<sub>t</sub>. If it is not clear yet, have a look at the following diagram:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/pedroai-rl/target_q_value_computation.svg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Target Q value from next_state S<sub>t+1</sub> and reward R<sub>t</sub></figcaption>
</figure>
</div>
<p>This computation takes advantage of the following factorization of state S<sub>t</sub> Q value:</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/pedroai-rl/q_value_factorization.svg" class="img-fluid"></p>
<p>The target Q value is still wrong because it uses the neural network to compute part of it. However, it is a little bit less wrong because the other part is computed with the actual reward of this experience.</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/pedroai-rl/target_q_value_wrongness.svg" class="img-fluid"></p>
<p>When the neural network compare its Q value estimation with the target Q value and updates its weights, it makes a step in the right direction, making its estimation a little bit better for next time. After many iterations, the neural network converges to estimate the actual Q values.</p>
<p>In the next chapter, we will have a look at PedroAI’s reward function defining what reward is given to the AI exactly.</p>
</section>
<section id="reward-function" class="level1">
<h1>Reward function</h1>
<p>As we have seen <a href="../rl-introduction/rl-introduction.html#the-reward-hypothesis-the-central-idea-of-reinforcement-learning">previously</a>, the goal of any RL agent is to maximize its expected cumulative reward. PedroAI is no exception. We have to define a reward function that gives the AI a reward at each step. The AI will then try to maximise its expected return (expected cumulative reward).</p>
<section id="trackmania-naive-reward-function" class="level2">
<h2 class="anchored" data-anchor-id="trackmania-naive-reward-function">Trackmania naive reward function</h2>
<p>The true objective of Trackmania is to complete a map in the minimum amount of time possible. A straightforward reward function would be to reward the AI when it finishes a map with a reward inversly proportional to the time it took.</p>
<p>The issue with this reward function is that it is way to sparse. At the start of training, the AI knows nothing about its environment and all actions are taken randomly. The AI will have to wander the map for ages before finishing the map even once and start learning something.</p>
<p><video src="random_input.webm" class="img-fluid" controls=""><a href="random_input.webm">Video</a></video></p>
<p>Even if the AI manages to finish a map regularly, it will be very diffcult for it to know what went well and what went wrong in the run. What turn it took well and what turn it took poorly ?</p>
<p>We have to define a better reward function for training.</p>
</section>
<section id="pedroai-reward-function" class="level2">
<h2 class="anchored" data-anchor-id="pedroai-reward-function">PedroAI reward function</h2>
<p>PedroAI defines a reward function that gives feedback at each step. The challenge is to find a dense reward function that is a good proxy for the true objective “complete the map in the minimum amount of time”.</p>
<p>Using a reference trajectory (author or wr), the AI gets a positive reward for:</p>
<ul>
<li>making progress on the reference trajectory</li>
<li>completing the map</li>
</ul>
<p>It gets a negative reward for:</p>
<ul>
<li>being in a mistake state (too far from reference trajectory or not making progress)</li>
<li>respawning or ending the round without completing the map (happens when the AI is in a mistake state for too long)</li>
</ul>
<p>Let’s go into more detail on each of these points.</p>
<section id="progress-on-reference-trajectory" class="level3">
<h3 class="anchored" data-anchor-id="progress-on-reference-trajectory">Progress on reference trajectory</h3>
<p>Progress at each step is the length of completed trajectory between previous and current state. The car position is projected to the trajectory to compute this length.</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/pedroai-rl/trajectory.png" style="border-radius:10px; width:100%"></p>
<p>Then the AI gets rewarded as follow :</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/pedroai-rl/completed_trajectory_reward.svg" class="img-fluid"></p>
<p>In other words, the AI is rewarded for the speed at which it completes the reference trajectory. If the AI would be following the reference trajectory perfectly at a constant speed this reward would simplify to :</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/pedroai-rl/speed_reward.svg" class="img-fluid"></p>
<p>Will the AI be able to do better than the reference trajectory ? Yes, it will! Consider the following reference trajectory:</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/pedroai-rl/poor_trajectory.png" style="border-radius:10px; width:100%"></p>
<p>The AI will make more progess faster if it goes straight and doesn’t zigzag.</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/pedroai-rl/poor_trajectory_straight.png" style="border-radius:10px; width:100%"></p>
<p>Even a poor trajectory will help the AI learn to play well.</p>
<p>Finally, the farther the car is from the trajectory, the more this reward is discounted. It helps the AI not wander too long on the wrong path. If the AI is closer than 10 meters, the reward is not discounted. After that, the reward is discounted linearly.</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"></span>
<span id="cb1-4">discount_threshold <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb1-5">max_distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@np.vectorize</span></span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> distance_discount(distance):</span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> discount_threshold:</span>
<span id="cb1-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb1-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> max_distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> distance:</span>
<span id="cb1-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> (distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> discount_threshold) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (max_distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> discount_threshold)</span>
<span id="cb1-15"></span>
<span id="cb1-16"></span>
<span id="cb1-17">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, max_distance <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb1-18">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distance to reference trajectory (m)"</span>)</span>
<span id="cb1-19">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"reward multiplier"</span>)</span>
<span id="cb1-20">plt.plot(x, distance_discount(x))</span>
<span id="cb1-21">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div id="fig-discount" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/pedroai-rl/pedroai-rl_files/figure-html/fig-discount-output-1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure&nbsp;1: Distance discount</figcaption>
</figure>
</div>
</div>
</div>
</section>
<section id="completing-the-map" class="level3">
<h3 class="anchored" data-anchor-id="completing-the-map">Completing the map</h3>
<p>Completing the map gives the AI a bigger reward. We have to make this reward big because the AI won’t get further reward after finishing the map. If this reward is too low, the risk is that during training, the AI prefer to miss the finish in the hope to get more reward later.</p>
<p>PedroAI tackles this issue by giving the AI a reward equivalent to its expected return if it were to follow a reference trajectory perfectly at its current speed.</p>
<p>Remember that the expected return, or expected cumulative reward is computed as follows:</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/pedroai-rl/reward_gamma_sum.svg" class="img-fluid"></p>
<p>PedroAI’s formula for map completion reward is:</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/pedroai-rl/map_completion_reward.svg" class="img-fluid"></p>
<p>This way, the finish reward is almost always larger than what the AI might expect if it was still driving along a trajectory. Additionally, it incentivise the AI to cross the finish line with maximum speed.</p>
<p>This approach generally results in faster completion times, but there is a drawback in that the AI may sometimes choose longer routes to gain more speed before finishing.</p>
</section>
<section id="mistake-state" class="level3">
<h3 class="anchored" data-anchor-id="mistake-state">Mistake state</h3>
<p>The AI gets a small penalty for being in a mistake state. There are two possible mistakes:</p>
<ul>
<li>Being too far from the trajectory: the distance between the car and his projection on the reference trajectory is more than 50 meters.</li>
<li>Not making progress on the reference trajecory: the car already got farther on the trajectory before during the round.</li>
</ul>
<p>PedroAI gives a penalty of ≈14 points, which correspond to the amount of point the AI would get if it was driving at 50km/h following the reference trajectory. I tuned this value and found out that -14 yields the best results.</p>
</section>
<section id="respawn-or-end-round" class="level3">
<h3 class="anchored" data-anchor-id="respawn-or-end-round">Respawn or end round</h3>
<p>If the AI is in a mistake state for more than 4 seconds, it respawns.</p>
<p>From the point of vue of the AI, that is where the round ends; it doesn’t know that it is instead only respawning. For those familiar with reinforcement learning, this is the end of the episode, but for the in-game round and my satistics, this is only a respawn.</p>
<p>If the AI respawns 4 times on the same checkpoint and finds itself in a mistake state for more than 4 seconds again, it will end the round for good.</p>
<p>Similar to map completion reward, when the AI must respawn or end the round, PedroAI gives it the expected return if the AI where to stay in a mistake state indefinitely.</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/pedroai-rl/respawn_reward.svg" class="img-fluid"></p>
<p>Now, you should have a better understanding of how PedroAI works. In summary:</p>
<ul>
<li>PedroAI uses an adapted version of Deep Q-Learning with four seperate workers, three to collect experiences and one to learn from those experiences.</li>
<li>The neural network estimates the expected discounted cumulative rewards directly with one state. It doesn’t need to predict everything that will happen in the future. When learning, the trick is to reuse the neural network on the next state to estimate the future rewards.</li>
<li>The true Trackmania reward “complete the map in the minimum amount of time possible” is too sparse for reinforcement learning. PedroAI uses a denser reward function leveraging author or wr trajectory.</li>
</ul>
<p>Stay tuned for the third blog post in this series where I present the technical details of the project: neural network architecture, frameworks, telemtry data gathering, and more … I am still working on it 🤓</p>


</section>
</section>
</section>

 ]]></description>
  <guid>https://trackmania-ai.github.io/tmblog/blog/blog/posts/pedroai-rl/pedroai-rl.html</guid>
  <pubDate>Wed, 26 Apr 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Introduction to Deep Reinforcement Learning (Trackmania AI POV)</title>
  <dc:creator>Pierre Porcher</dc:creator>
  <link>https://trackmania-ai.github.io/tmblog/blog/blog/posts/rl-introduction/rl-introduction.html</link>
  <description><![CDATA[ 



<!-- WARNING: THIS FILE WAS AUTOGENERATED! DO NOT EDIT! -->
<p>Welcome to the wonderful land of Deep Reinforcement Learning, a hot topic in Artifical Intelligence.</p>
<p>Deep RL is a type of Machine Learning where an agent learns how to behave in an environment by performing actions and looking at the results.</p>
<p>In this blog post, we will explore the basics of deep reinforcement learning. We will focus on what <a href="?var:stream">PedroAI</a> project uses. The project features an AI learning to play the popular racing game <a href="?var:trackmania">Trackmania</a>. The entire process is streamed on <a href="?var:stream">Twitch</a> allowing viewers to watch the AI improve over time.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>We will be introducing some key concepts about deep reinforcement learning that are used by PedroAI. For a more in-depth introduction to deep reinforcement learning, I recommend checking out <a href="https://huggingface.co/learn/deep-rl-course/unit1/introduction">this blog post</a> from Thomas Simonini and Omar Sanseviero. The current post is heavily inspired by their work.</p>
</div>
</div>
<p>This article is the first of a two-part series where we first learn about deep reinforcement learning basics before diving deeper into the specificities of the <a href="?var:stream">PedroAI</a> project.</p>
<ul>
<li>Introduction to Deep Reinforcement Learning (Trackmania AI POV)</li>
<li><a href="../pedroai-rl/pedroai-rl.html">How PedroAI works</a></li>
</ul>
<p>A third article about the technical details of <a href="?var:stream">PedroAI</a> is being written as you read this.</p>
<section id="what-is-reinforcement-learning" class="level1">
<h1>What is Reinforcement Learning?</h1>
<p>To understand Reinforcement Learning, let’s start with the big picture.</p>
<section id="the-big-picture" class="level2">
<h2 class="anchored" data-anchor-id="the-big-picture">The big picture</h2>
<p>The idea behind Reinforcement Learning is that an agent will learn from the environment by interacting with it through trial and error and receiving rewards, negative or positive, as feedback for performing actions.</p>
<p>Imagine putting your little sister in front of a slightly modified version of Trackmania where crossing a checkpoint or the finish line gives you one point but falling in the water substracts one point. You put a controller in her hands and let her alone.</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/rl-introduction/sister_start.png" alt="Sister at the start of a Trackmania map" style="border-radius:10px; width:100%"></p>
<p>Your sister will interact with the environment, the Trackmania game, by pressing the forward trigger (action). She got a checkpoint, that’s a +1 reward. It’s positive, she just understood that in this game she must get checkpoints.</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/rl-introduction/sister_positive.png" alt="Sister gets +1 rewards after crossing a checkpoint" style="border-radius:10px; width:100%"></p>
<p>She continues to press forward but presses left too late to take the turn and falls in the water, that’s -1 reward.</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/rl-introduction/sister_negative.png" alt="Sister gets -1 rewards after falling in the water" style="border-radius:10px; width:100%"></p>
<p>By interacting with her environment, through trial and error, your little sister understood that, in this environment, she must take checkpoints and not fall.</p>
<p>Without any supervision, your sister will get better and better at playing the game.</p>
<p>That’s how humans and animals learn, through interaction. Reinforcement Learning is just a computational approach of learning from action.</p>
</section>
<section id="a-formal-definition" class="level2">
<h2 class="anchored" data-anchor-id="a-formal-definition">A formal definition</h2>
<p>If we take now a formal definition:</p>
<blockquote class="blockquote">
<p>Reinforcement learning is a framework for solving control tasks, also called decision problems, by building agents that learn from the environment by interacting with it through trial and error and receiving rewards, positive or negative, as unique feedback.</p>
</blockquote>
<p>But how does Reinforcement Learning work?</p>
</section>
</section>
<section id="the-reinforcement-learning-framework" class="level1">
<h1>The Reinforcement Learning Framework</h1>
<section id="the-rl-process" class="level2">
<h2 class="anchored" data-anchor-id="the-rl-process">The RL Process</h2>
<p>The RL Process is a loop of state, action, reward and next state:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/rl-introduction/rl_loop.svg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">The RL Process loop</figcaption>
</figure>
</div>
<p>To understand the RL process, let’s consider PedroAI learning to play Trackmania:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/rl-introduction/rl_loop_tm.svg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">The RL Process loop with Trackmania</figcaption>
</figure>
</div>
<ul>
<li>The Agent receives state S<sub>0</sub> from the Environment, the first frame of the game.</li>
<li>Based on that state S<sub>0</sub>, the agent takes action A<sub>0</sub>, the car will go forward.</li>
<li>The Environment goes to a new state S<sub>1</sub>, a new frame.</li>
<li>The Environment gives some reward R<sub>1</sub>.</li>
</ul>
<p>This RL loop outputs a sequence of state, action, reward and next state.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/rl-introduction/sars.svg" class="img-fluid figure-img"></p>
</figure>
</div>
<p>The agent’s goal is to maximize its cumulative reward, called return.</p>
</section>
<section id="the-reward-hypothesis-the-central-idea-of-reinforcement-learning" class="level2">
<h2 class="anchored" data-anchor-id="the-reward-hypothesis-the-central-idea-of-reinforcement-learning">The reward hypothesis: the central idea of Reinforcement Learning</h2>
<p>Reinforcement Learning is based on the reward hypothesis, which is that all goals can be described as the maximization of the return (cumulative reward). In Reinforcement Learning, to have the best behavior, we need to maximize the return.</p>
</section>
<section id="rewards-and-the-discounting" class="level2">
<h2 class="anchored" data-anchor-id="rewards-and-the-discounting">Rewards and the discounting</h2>
<p>The reward is fundamental in RL because it’s the only feedback the agent gets. It enables the agent to know if the action taken was good or not.</p>
<p>The cumulative reward at each time step t can be written as:</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/rl-introduction/reward.svg" class="img-fluid"></p>
<p>Wich is equivalent to:</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/rl-introduction/reward_sum.svg" class="img-fluid"></p>
<p>Now imagine you want to calculate the expected return of a state. You want to know the cumulative reward you can expect to get given your current state.</p>
<p>You could sum all the reward you expect to get in the future until the end of the run. However, in practice, the rewards that come sooner are more likely to happen since they are more predictable than the long-term future reward. That is why we introduce a discount rate for future potential rewards.</p>
<p>Let’s say your agent is at the start of the following track. Your goal is to cross the maximum number of checkpoints before falling off the road.</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/rl-introduction/discount_track.png" style="border-radius:10px; width:100%"></p>
<p>It’s more probable to cross the checkpoints near your position than the ones close to the finish. The farther a checkpoint is from your position, the more likely it is to fall off before getting it.</p>
<p>Consequently, the reward given for crossing a checkpoint far away is discounted more. We are not sure we’ll be able to cross the far away checkpoint.</p>
<p>In practice, to discount the rewards, we proceed like this:</p>
<ol type="1">
<li>We define a discount rate called gamma. It must be between 0 and 1. Most of the time between 0.99 and 0.90.</li>
</ol>
<ul>
<li><p>The larger the gamma, the smaller the discount. This means our agent cares more about the long-term reward.</p></li>
<li><p>On the other hand, the smaller the gamma, the bigger the discount. This means our agent cares more about the short term reward (the nearest checkpoints here).</p></li>
</ul>
<ol start="2" type="1">
<li>Then, each reward will be discounted by gamma to the exponent of the time step. As the time step increases, the car will have more opportunities to fall off, so the future reward is less and less likely to happen.</li>
</ol>
<p>The discounted cumulative reward can be written as:</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/rl-introduction/reward_gamma.svg" class="img-fluid"></p>
<p>Or:</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/rl-introduction/reward_gamma_sum.svg" class="img-fluid"></p>
</section>
<section id="explorationexploitation-tradeoff" class="level2">
<h2 class="anchored" data-anchor-id="explorationexploitation-tradeoff">Exploration/Exploitation tradeoff</h2>
<p>Before looking at how to solve Reinforcement Learning problems, we must cover a very important topic: the exploration/exploitation trade-off.</p>
<ul>
<li><p>Exploration is exploring the environment by trying random actions in order to find more information about the environment.</p></li>
<li><p>Exploitation is exploiting known information to maximize the reward.</p></li>
</ul>
<p>Remember, the goal of our RL agent is to maximize the expected cumulative reward. However, we can fall into a common trap.</p>
<p>Let’s take an example:</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/rl-introduction/exploration_track.png" style="border-radius:10px; width:100%"></p>
<p>Here our RL agent is rewarded for reaching the finish line fast. The faster it cross the finish line, the more reward it gets.</p>
<p>Now consider that our RL agent learnt that going forward in a straight line is a good way to reach its destination if there is no obstacle in between. The agent will always take the road on the left and never try the road on the right even if the right road is actually faster (exploitation).</p>
<p>But if our agent does a little bit of exploration and try the road on the right, it will discover a faster route that yields a bigger reward (exploration).</p>
<p>This is what we call the exploration/exploitation trade-off. We need to balance how much we explore the environment and how much we exploit what we know about the environment.</p>
<p>Therefore, we must define a rule that helps to handle this trade-off. We’ll see in future post how PedroAI handles this trade-off.</p>
</section>
<section id="how-to-solve-reinforcement-learning-problems" class="level2">
<h2 class="anchored" data-anchor-id="how-to-solve-reinforcement-learning-problems">How to solve Reinforcement Learning problems</h2>
<p>In other words, how to build an RL agent that can select the actions that maximize its expected cumulative reward?</p>
</section>
<section id="the-policy-π-the-agents-brain" class="level2">
<h2 class="anchored" data-anchor-id="the-policy-π-the-agents-brain">The Policy π: the agent’s brain</h2>
<p>The Policy π is the brain of our agent. It’s the function that tells us what action to take given the state we are in. So, it defines the agent’s behavior at a given time.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/rl-introduction/policy.svg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Policy π</figcaption>
</figure>
</div>
<p>This policy is the function we want to learn. Our goal is to find the optimal policy π, the policy that maximizes expected return when the agent acts according to it. We find this π through training.</p>
<p>There are two approaches to train our agent to find this optimal policy π*:</p>
<ul>
<li>Directly, by teaching the agent to learn which action to take given the state it is in: Policy-Based Methods. We will not discuss this method here, see https://huggingface.co/blog/deep-rl-intro#policy-based-methods for more information.</li>
<li>Indirectly, teach the agent to learn which state is more valuable and then take the action that leads to the more valuable states: Value-Based Methods. This is the method PedroAI uses.</li>
</ul>
</section>
<section id="value-based-methods" class="level2">
<h2 class="anchored" data-anchor-id="value-based-methods">Value-based methods</h2>
<p>In value-based methods, instead of training a policy function, we train a value function that maps a state to the expected value of being at that state.</p>
<p>The value of a state is the expected discounted return the agent can get if it starts in that state, and then act according to our policy.</p>
<p>“Act according to our policy” just means that our policy is “going to the state with the highest value”.</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/rl-introduction/value_function.svg" class="img-fluid"></p>
<p>Here we see that our value function defined value for each possible state.</p>
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/rl-introduction/state_value.svg" class="img-fluid"></p>
<p>Thanks to our value function, at each step our policy will select the state with the biggest value defined by the value function: -8, then -7, then -6 (and so on) to attain the goal.</p>
</section>
<section id="the-deep-in-reinforcement-learning" class="level2">
<h2 class="anchored" data-anchor-id="the-deep-in-reinforcement-learning">The “Deep” in Reinforcement Learning</h2>
<p>⇒ What we’ve talked about so far is Reinforcement Learning. But where does the “Deep” come into play?</p>
<p>Deep Reinforcement Learning introduces deep neural networks to solve Reinforcement Learning problems — hence the name “deep”.</p>
<p>For instance, PedroAI uses Deep Q-Learning. It uses a Neural Network to approximate the expected value of a state for each action it could take.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://trackmania-ai.github.io/tmblog/blog/blog/posts/rl-introduction/deep_q_network.svg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Deep Q learning for Trackmania</figcaption>
</figure>
</div>
<p>If you want to learn about deep learning in general, not only reinforcement learning, you should definitely watch <a href="https://course.fast.ai">the fastai Practical Deep Learning for Coders (Free)</a>.</p>
<p>That was a lot of information, if we summarize:</p>
<ul>
<li><p>Reinforcement Learning is a computational approach of learning from action. We build an agent that learns from the environment by interacting with it through trial and error and receiving rewards, negative or positive, as feedback.</p></li>
<li><p>The goal of any RL agent is to maximize its expected cumulative reward (also called expected return) because RL is based on the reward hypothesis, which is that all goals can be described as the maximization of the expected cumulative reward.</p></li>
<li><p>The RL process is a loop that outputs a sequence of state, action, reward and next state.</p></li>
<li><p>To calculate the expected cumulative reward (expected return), we discount the rewards: the rewards that come sooner (at the beginning of the game) are more probable to happen since they are more predictable than the long-term future reward.</p></li>
<li><p>To solve an RL problem, you want to find an optimal policy, the policy is the “brain” of your AI that will tell us what action to take given a state. The optimal one is the one who gives you the actions that maximize the expected return.</p></li>
<li><p>There are two ways to find your optimal policy:</p>
<ol type="1">
<li>By training your policy directly: policy-based methods.</li>
<li>By training a value function that tells us the expected return the agent will get at each state and use this function to define our policy: value-based methods.</li>
</ol></li>
<li><p>Finally, we speak about Deep RL because we introduce deep neural networks to estimate the value of a state hence, the name “deep”.</p></li>
</ul>
<p>I encourage you to read the next blog post in this series <a href="../pedroai-rl/pedroai-rl.html">How PedroAI works</a>.</p>


</section>
</section>

 ]]></description>
  <guid>https://trackmania-ai.github.io/tmblog/blog/blog/posts/rl-introduction/rl-introduction.html</guid>
  <pubDate>Tue, 25 Apr 2023 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
